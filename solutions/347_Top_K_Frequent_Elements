// 347. Top K Frequent Elements - Solution
/*
HOW IT WORKS:
We used Group Anagrams as a base for the problem since the problems are somewhat similar. We created a dictionary to keep track of the frequency of each number in the input array. After that, we converted the dictionary into an array of entries and sorted the values in decending order. Finally, we looped through the sorted entries. We used another for loop to push the associated keys of the sorted values into a new array until we reached k, then returned the dummyArray.

New item learned: Object.entries() method
Object.entries returns an array from a dictionary. Each item in the array is a subarray with two items, the key and the value.
Ex) 
dummyDict = {1: 3, 2: 2, 3: 1}
Object.entries(dummyDict) would return [[1, 3], [2, 2], [3, 1]]


*/

/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number[]}
 */


var topKFrequent = function(nums, k) {

    let dummyDict = {};
    let dummyArray = [];

    for (let i = 0; i < nums.length; i++ ){
        
        let currentNum = nums[i]
    
        if (!dummyDict[nums[i]]){
            dummyDict[currentNum] = 1
        } else {
            dummyDict[currentNum] = dummyDict[currentNum] + 1
        }

    }

    let sortedEntries = Object.entries(dummyDict).sort((a,b) => b[1] - a[1]);

    for (i = 0; i < k; i++){

        dummyArray.push(Number(sortedEntries[i][0]))
        
    }

    return dummyArray

};

/*
347. Top K Frequent Elements
Solved
Medium
Topics
premium lock icon
Companies
Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2

Output: [1,2]

Example 2:

Input: nums = [1], k = 1

Output: [1]

Example 3:

Input: nums = [1,2,1,2,1,2,3,1,3,2], k = 2

Output: [1,2]

 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
 */